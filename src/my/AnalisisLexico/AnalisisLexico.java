/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.AnalisisLexico;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Scanner;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author diego
 */
public class AnalisisLexico extends javax.swing.JFrame {

    /**
     * Creates new form AnalisisLexico
     */
    public AnalisisLexico() {
        initComponents();
        //Inicialización de tabla
        String col[] = {"Token", "Tipo"};
        DefaultTableModel tablemodel = new DefaultTableModel(col, 0);
        this.tabla.setModel(tablemodel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        entradaTextoTA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lblError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Entrada de texto");

        entradaTextoTA.setColumns(20);
        entradaTextoTA.setRows(5);
        jScrollPane1.setViewportView(entradaTextoTA);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jLabel1.getAccessibleContext().setAccessibleName("inputText");

        jScrollPane2.setBorder(null);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabla);

        jLabel2.setText("Análisis léxico:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel2.getAccessibleContext().setAccessibleName("SalidaLabel");

        jScrollPane2.setViewportView(jPanel2);

        jButton1.setText("Procesar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Ejecutar");

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        jScrollPane4.setViewportView(lblError);

        jLabel3.setText("Análisis sintáctico:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jScrollPane2.getAccessibleContext().setAccessibleName("");
        jButton1.getAccessibleContext().setAccessibleName("ProcesarButton");
        jButton2.getAccessibleContext().setAccessibleName("SalirButtpn");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.tabla.getModel();
        model.setRowCount(0);
        analizar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalisisLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalisisLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalisisLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalisisLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalisisLexico().setVisible(true);
            }
        });
    }
    
    
    public void analizar(){
        //Expresiones regulares para identificar los tokens
        String patron = ("(ADD|ALL|ALTER|ASC|AUTO_INCREMENT|BEFORE|BETWEEN|BY|COLUMN|CONDITION|CONTINUE|CREATE|CURRENT_DATE|CURRENT_TIMESTAMP|CURRENT_TIME|DATABASE|DATABASES|DEFAULT|DELETE|DESC|DISTINCT|DROP|ELSEIF|ELSE|EXISTS|FALSE|FETCH|FOREIGN|FOR|FROM|GROUP|IF|IGNORE|INNER|INSERT|INTO|IS|JOIN|KEYS|KEY|LIKE|LIMIT|NOT|NULL|ON|ORDER|PRIMARY|READ|READS|RENAME|REPLACE|REQUIRE|RETURN|RIGHT|RLIKE|SCHEMAS|SCHEMA|SELECT|SET|SHOW|TABLE|THEN|UNDO|UNION|UNSIGNED|UNIQUE|UPDATE|USE|VALUES|WITH|WRITE)|(AND|WHERE|TRUE|OR)|(INT|VARCHAR|DECIMAL|DATETIME|BLOB|BINARY|VARBINARY|DATE|TIMESTAMP|TIME|DOUBLE|FLOAT|CHAR|BOOLEAN)|('[A-Za-z 0-9_-]+')|([0-9]+)|([A-Za-z0-9_-]+)|([>|<|+|=|-]+)|(;)|([.])|([(])|([)])|([\\[])|([\\]])|([{])|([}])|([,])|([*])");

        //Cadena a evaluar
        String texto = entradaTextoTA.getText();

        //Evaluación
        Pattern p = Pattern.compile(patron);
        Matcher matcher = p.matcher(texto);

        //Definición de arreglos y contador
        ArrayList<String> tokens = new ArrayList<String>();
        ArrayList<String> definiciones = new ArrayList<String>();
        while(matcher.find()){
           String tokenTipo1 = matcher.group(1);
          if(tokenTipo1 != null){
            tokens.add(tokenTipo1);
            definiciones.add("Palabra_reservada");
          }
          String tokenTipo2 = matcher.group(2);
          if(tokenTipo2 != null){
            tokens.add(tokenTipo2);
            definiciones.add("Condicion");
          }
          String tokenTipo3 = matcher.group(3);
          if(tokenTipo3 != null){
            tokens.add(tokenTipo3);
            definiciones.add("Tipo_dato");
          }
          String tokenTipo4 = matcher.group(4);
          if(tokenTipo4 != null){
            tokens.add(tokenTipo4);
            definiciones.add("Cadena");
          }
          String tokenTipo5 = matcher.group(5);
          if(tokenTipo5 != null){
            System.out.println("Numero: " +tokenTipo5);
            tokens.add(tokenTipo5);
            definiciones.add("Numero");
          }
          String tokenTipo6 = matcher.group(6);
          if(tokenTipo6 != null){
            tokens.add(tokenTipo6);
            definiciones.add("Identificador");
          }
          String tokenTipo7 = matcher.group(7);
          if(tokenTipo7 != null){
            tokens.add(tokenTipo7);
            definiciones.add("Operador");
          }
          String tokenTipo8 = matcher.group(8);
          if(tokenTipo8 != null){
            tokens.add(tokenTipo8);
            definiciones.add("Punto_coma");
          }
          String tokenTipo9 = matcher.group(9);
          if(tokenTipo9 != null){
            tokens.add(tokenTipo9);
            definiciones.add("Punto");
          }
          String tokenTipo10 = matcher.group(10);
          if(tokenTipo10 != null){
            tokens.add(tokenTipo10);
            definiciones.add("Op_parentesis");
          }
          String tokenTipo11 = matcher.group(11);
          if(tokenTipo11 != null){
            tokens.add(tokenTipo11);
            definiciones.add("Cl_parentesis");
          }
          String tokenTipo12 = matcher.group(12);
          if(tokenTipo12 != null){
            System.out.println("Op_corchete: " +tokenTipo12);
            tokens.add(tokenTipo12);
            definiciones.add("Op_corchete");
          }
          String tokenTipo13 = matcher.group(13);
          if(tokenTipo13 != null){
            tokens.add(tokenTipo13);
            definiciones.add("Cl_corchete");
          }
          String tokenTipo14 = matcher.group(14);
          if(tokenTipo14 != null){
            tokens.add(tokenTipo14);
            definiciones.add("Op_llave");
          }
          String tokenTipo15 = matcher.group(15);
          if(tokenTipo15 != null){
            tokens.add(tokenTipo15);
            definiciones.add("Cl_llave");
          }
          String tokenTipo16 = matcher.group(16);
          if(tokenTipo16 != null){
            tokens.add(tokenTipo16);
            definiciones.add("Coma");
          }
          String tokenTipo17 = matcher.group(17);
          if(tokenTipo17 != null){
            tokens.add(tokenTipo17);
            definiciones.add("Asterisco");
          }
        }
        
        for(int i = 0; i < tokens.size(); i++){
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            String token = tokens.get(i);
            String elemento = definiciones.get(i);
            
            Object[] data = {token, elemento};
            
            model.addRow(data);
        }
        String answ = Boolean.toString(inicio(tokens, definiciones, 0));
        if(answ.equals("true")){
            lblError.setText("No se encontraron errores");
        }
    }
    
    //EMPIEZA EL DESVERGUEEEEE
    public boolean inicio(ArrayList<String> token, ArrayList<String> tipo, int step){
        boolean flag = false;
        try{if(tipo.get(step) != "Palabra_reservada"){
            flag = false;
            lblError.setText(error(token, step));
        }else{
            switch(token.get(step)){
                case "CREATE":
                   step += 1;
                   if(token.get(step).equals("TABLE")){
                    flag = true;
                   }else if(token.get(step).equals("DATABASE")){
                    flag = database(token, tipo, step + 1);   
                   }else{
                    flag = false;
                   }
                    break;
                case "DROP":
                   step += 1;
                   if(token.get(step).equals("TABLE")){
                    flag = true;
                   }else if(token.get(step).equals("DATABASE")){
                    flag = database(token, tipo, step + 1);   
                   }else{
                    flag = false;
                   }
                    break;
                case "SELECT":
                   step += 1;
                   if(token.get(step).equals("*"))
                   {
                       step += 1;
                       if (token.get(step).equals("FROM"))
                       {
                         step += 1;
                          if (tipo.get(step).equals("Identificador"))
                               {
                                 flag = listaidentificadoresfrom(token, tipo, step);
                               } 
                          else
                                {
                                    lblError.setText(error(token, step));
                                    flag = false;
                                }    
                       }
                   }
                   else if (tipo.get(step).equals("Identificador"))
                   {
                   flag = listaidentificadores(token, tipo, step);
                   }
                   else
                   {
                   lblError.setText(error(token, step));
                   flag = false;
                   }
                    break;
                case "INSERT":
                   
                    break;
                case "DELETE":
                   step += 1;
                   if(token.get(step).equals("FROM")){
                       step += 1;
                       if(tipo.get(step).equals("Identificador")){
                           step += 1;
                           if(token.get(step).equals("WHERE")){
                               step += 1;
                               flag = identificador(token, tipo, step);
                            }
                       }else{
                        lblError.setText(error(token, step));
                       }
                   }else{
                    lblError.setText(error(token, step));
                   }
                    break;
                case "UPDATE":
                    step += 1;
                   if(tipo.get(step).equals("Identificador")){
                       step+= 1;
                       if(token.get(step).equals("set") || token.get(step).equals("SET") || token.get(step).equals("Set")){
                           step+=1;
                           if(tipo.get(step).equals("Identificador")){
                               step+=1;
                               flag = evaluateSet(token, tipo, step);
                           }else{
                               lblError.setText(error(token, step));
                               flag = false;
                           }
                       }else{
                           lblError.setText(error(token, step));
                           flag = false;
                       }
                   }
                    break;
            }
        }}
        catch (Exception e){
            flag = false;
        lblError.setText("Sentencia incompleta");
        }
        return flag;
      
    }
    
    public boolean database(ArrayList<String> token, ArrayList<String> tipo, int step){
        if (tipo.get(step).equals("Identificador")){
            step += 1;
            return true;           
        }else{
            lblError.setText(error(token, step));
            return false;
        }
    }
    
    //evalua los identificadores a la hora de elegir los campos a mostrar en un select
    public boolean listaidentificadores(ArrayList<String> token, ArrayList<String> tipo, int step)
    {
      boolean flag = false;
      step = step + 1;
      if(token.get(step).equals(","))
      {
       step = step + 1;
       if (tipo.get(step).equals("Identificador"))
       {
          return flag = listaidentificadores(token, tipo, step);
       }
       else
       {
        lblError.setText(error(token, step));
        flag = false;
       }
      }
      else if (token.get(step).equals("FROM"))
      {
        step = step +1;
        if (tipo.get(step).equals("Identificador"))
       {
          return flag = listaidentificadoresfrom(token, tipo, step);
       }
         else
       {
         lblError.setText(error(token, step));
        flag = false;
       }
      }
      else
      {
         lblError.setText(error(token, step));
         flag = false;  
      }
      if (flag == false)
        {
         lblError.setText(error(token, step));  
        }
     return flag;  
    }
    
      //evalua los identificadores a la hora de elegir las tablas en un select
    public boolean listaidentificadoresfrom(ArrayList<String> token, ArrayList<String> tipo, int step)
    {
      boolean flag = false;
      step = step + 1;
      if(token.size() == step){
             lblError.setText("No se encontraron errores");
             return true;
              }
      if(token.get(step).equals(","))
      {
       step = step + 1;
       if (tipo.get(step).equals("Identificador"))
       {
          if(token.size() == step+1){
             lblError.setText("No se encontraron errores");
             return true;
              }
           else
           {
             flag = listaidentificadoresfrom(token, tipo, step);
           }
       }
       else
       {
        lblError.setText(error(token, step));
        return flag = false;
       }
      }
      else if (token.get(step).equals("WHERE"))
      {
        step = step +1;
        if (tipo.get(step).equals("Identificador"))
       {
           return flag = identificador(token, tipo, step);
       }
         else
       {
        lblError.setText(error(token, step));
         flag = false;
       }
      }
       else if (token.get(step).equals("ORDER"))
      {
        step = step +1;
        if (token.get(step).equals("BY"))
       {
           //akíii
           return flag = identificadororderb(token, tipo, step+1);
       }
         else
       {
        lblError.setText(error(token, step));
        flag = false;
       }
      }
      else
      {
         lblError.setText(error(token, step));
          flag = false;  
      }
      if (flag == false)
        {
         lblError.setText(error(token, step));  
        }
     return flag;  
    }
    
    //Evalua la secuencia de identificadores después de un ORDER BY 
      public boolean identificadororderb(ArrayList<String> token, ArrayList<String> tipo, int step){
        boolean flag = false;
        if(tipo.get(step).equals("Identificador")){
            step += 1;
            if(token.size() == step)
            {
               lblError.setText("No se encontraron errores");
               flag = true;
            }
            else if(token.get(step).equals("ASC")||token.get(step).equals("DESC")){
               step += 1;
              if(token.size() == step)
            {
               lblError.setText("No se encontraron errores");
               flag = true;
            }
              else if (token.get(step).equals(","))
              {
              return flag = identificadororderb(token, tipo, step+1);
              }
            }
            else{
                flag = false;
            }
        }else{
            flag = false;
        }
        if (flag == false)
        {
         lblError.setText(error(token, step));  
        }
        return flag;
    }
    //Evalua si es un identificador = 'cadena'
    public boolean identificador(ArrayList<String> token, ArrayList<String> tipo, int step){
        boolean flag = false;
        if(tipo.get(step).equals("Identificador")){
            step += 1;
            if(token.get(step).equals("=")){
                step += 1;
                if(tipo.get(step).equals("Cadena")||tipo.get(step).equals("Numero")){
                    step += 1;
                    if(token.size() == step){
                        lblError.setText("No se encontraron errores");
                         flag = true;
                    }else if(token.get(step).equals("AND") || token.get(step).equals("OR")){
                        flag = identificador(token, tipo, step + 1);
                    }else{
                                 lblError.setText(error(token, step));  
                        flag = false;
                    }
                }else{
                    flag = false;
                }
            }else{
                flag = false;
            }
        }else{
        }
        if (flag == false)
        {
         lblError.setText(error(token, step));  
        }
        return flag;
    }
    
    public String error(ArrayList<String> token, int step){
        return "Error en la posición "+ step + ", token incorrecto: "+ token.get(step);
    }
    
    public boolean evaluateSet(ArrayList<String> token, ArrayList<String> tipo, int step){
        while(tipo.get(step).equals("Punto_coma") == false){
            if(step != tipo.size()){
                if(token.get(step).equals("=")){
                    step += 1;
                    if(tipo.get(step).equals("Cadena")){
                        step+=1;
                        if(tipo.get(step).equals("Coma")){
                            step+=1;
                            if(tipo.get(step).equals("Identificador")){
                                step+=1;
                                return evaluateSet(token, tipo, step);
                            }else{
                                lblError.setText(error(token, step));
                                return false;
                            }
                        }else if(tipo.get(step).equals("Punto_coma")){
                            return true;
                        }
                    }else{
                        lblError.setText(error(token, step));
                        return false;
                    }
                }else{
                    lblError.setText(error(token, step));
                    return false;
                }
            }else{
                lblError.setText(error(token, step));
                return false;
            }
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea entradaTextoTA;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblError;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
